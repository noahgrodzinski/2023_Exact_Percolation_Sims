### Does a system percolate?: the Hoshen-Kopelman algorithm (1976)
Proposed in (J. Hoshen and R. Kopelman, Phys. Rev. B 14:3438 (1976). ):

dimensions = (10, 10)
p=0.5

occupied = np.random.choice([1,0], size=dimensions, p=[p, 1-p])
largest_label = 0
label = np.zeros(dimensions, dtype=int)
labels = np.arange(dimensions[0]*dimensions[1], dtype=int)
tags = np.zeros(dimensions, dtype=int)

def find(x: int):
    y = np.copy(x)
    while labels[y] != y:
        y = np.copy(labels[y])

    while labels[x] != x:
        z = np.copy(labels[x])
        labels[x] = y
        x = z
    return y

def union(x: int, y: int):
    labels[find(x)] = np.copy(find(y))
    labels[find(y)] = np.copy(find(x))

for x in np.arange(dimensions[0], dtype=int):
    for y in np.arange(dimensions[1], dtype=int):
        if occupied[x, y] == 1:
            left = np.copy(label[x, y-1]) if y>0 else 0
            above = np.copy(label[x-1, y]) if x>0 else 0
            if (left == 0) and (above == 0):
                largest_label = largest_label + 1
                label[x, y] = largest_label
            elif (left != 0) and (above != 0) and left!=above:
                union(above,left)
                label[x, y] = find(left)
                #print("union time! --> ", x,y)
                #tags[x,y]=15
            elif (left != 0) or (above != 0):
                label[x, y] = find(max(left,above))

#tags[3, 1] = 100
#print(np.reshape(labels, dimensions))
#print(label)            
fig, ax = plt.subplots()
for i in np.arange(dimensions[0]):
    for j in np.arange(dimensions[1]):
        if label[i,j]>0:
            label[i,j] = label[i,j]%7 + 1
plt.imshow(label + tags)
ax.set_xticks([])
ax.set_yticks([])

print(labels)